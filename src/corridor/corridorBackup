#define GLFW_INCLUDE_NONE
#include <GLFW/glfw3.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"
#include "3D_tools.h"

#include "corridor.h"

/* Window properties */
static const unsigned int WINDOW_WIDTH = 1280;
static const unsigned int WINDOW_HEIGHT = 720;
static const char WINDOW_TITLE[] = "base";
static float aspectRatio = 1.0;

/* Minimal time wanted between two images */
static const double FRAMERATE_IN_SECONDS = 1. / 30.;

/* Virtual windows space */
// Space is defined in interval -1 and 1 on x and y axes
static const float GL_VIEW_SIZE = 20.;

/* Error handling function */
void onError(int error, const char *description)
{
	fprintf(stderr, "GLFW Error: %s\n", description);
}

void onWindowResized(GLFWwindow *window, int width, int height)
{
	aspectRatio = width / (float)height;

	glViewport(0, 0, width, height);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60.0, aspectRatio, Z_NEAR, Z_FAR);
	glMatrixMode(GL_MODELVIEW);
}

void onKey(GLFWwindow *window, int key, int scancode, int action, int mods)
{
	if (action == GLFW_PRESS)
	{
		switch (key)
		{
		case GLFW_KEY_A:
		case GLFW_KEY_ESCAPE:
			glfwSetWindowShouldClose(window, GLFW_TRUE);
			break;
		case GLFW_KEY_L:
			glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
			break;
		case GLFW_KEY_P:
			glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
			break;
		case GLFW_KEY_KP_9:
			if (dist_zoom < 100.0f)
				dist_zoom *= 1.1;
			printf("Zoom is %f\n", dist_zoom);
			break;
		case GLFW_KEY_KP_3:
			if (dist_zoom > 1.0f)
				dist_zoom *= 0.9;
			printf("Zoom is %f\n", dist_zoom);
			break;
		case GLFW_KEY_UP:
			if (phy > 2)
				phy -= 2;
			printf("Phy %f\n", phy);
			break;
		case GLFW_KEY_DOWN:
			if (phy <= 88.)
				phy += 2;
			printf("Phy %f\n", phy);
			break;
		case GLFW_KEY_LEFT:
			theta -= 5;
			break;
		case GLFW_KEY_RIGHT:
			theta += 5;
			break;
		default:
			fprintf(stdout, "Touche non gérée (%d)\n", key);
		}
	}
}

void drawSideWall(GLuint textures) {
	glEnable(GL_TEXTURE_2D);
		
	glBindTexture(GL_TEXTURE_2D, textures);
	
	glBegin(GL_QUADS);
		glTexCoord2f(0.0, 1.0);
		glVertex2f(-0.5, -0.5);
		glTexCoord2f(1.0, 1.0);
		glVertex2f(0.5, -0.5);
		glTexCoord2f(1.0, 0.0);
		glVertex2f(0.5, 0.5);
		glTexCoord2f(0.0, 0.0);
		glVertex2f(-0.5, 0.5);
	glEnd();
	
	glBindTexture(GL_TEXTURE_2D, 0);
		
	glDisable(GL_TEXTURE_2D);
}

void drawCorridor(GLuint texturesTopBottom, GLuint texturesSides) {
	// dessiner mur 9 gauche jaune
	glPushMatrix();
	glTranslatef(-8, 0., -GL_VIEW_SIZE);
	glScalef(4.5, 9, 85);
	glRotatef(90, 0, 1, 0);
	drawSideWall(texturesSides);
	glPopMatrix();

	// dessiner mur 9 droit rouge
	glPushMatrix();
	glTranslatef(8, 0., -GL_VIEW_SIZE);
	glScalef(4.5, 9, 85);
	glRotatef(90, 0, 1, 0);
	drawSideWall(texturesSides);
	glPopMatrix();

	// dessiner mur 16 haut bleu
	glPushMatrix();
	glTranslatef(0, 4.5, -GL_VIEW_SIZE);
	glScalef(16, 8, 85);
	glRotatef(90, 1, 0, 0);
	glRotatef(-90, 0, 0, 1);
	drawSideWall(texturesTopBottom);
	glPopMatrix();

	// dessiner mur 16 bas rose
	glPushMatrix();
	glTranslatef(0, -4.5, -GL_VIEW_SIZE);
	glScalef(16, 8, 85);
	glRotatef(90, 1, 0, 0);
	glRotatef(-90, 0, 0, 1);
	drawSideWall(texturesTopBottom);
	glPopMatrix();
}

int main(int argc, char **argv)
{
	/* GLFW initialisation */
	GLFWwindow *window;
	if (!glfwInit())
		return -1;

	/* Callback to a function if an error is rised by GLFW */
	glfwSetErrorCallback(onError);

	/* Create a windowed mode window and its OpenGL context */
	window = glfwCreateWindow(WINDOW_WIDTH, WINDOW_HEIGHT, WINDOW_TITLE, NULL, NULL);
	if (!window)
	{
		// If no context created : exit !
		glfwTerminate();
		return -1;
	}

	/* Make the window's context current */
	glfwMakeContextCurrent(window);

	glfwSetWindowSizeCallback(window, onWindowResized);
	glfwSetKeyCallback(window, onKey);

	onWindowResized(window, WINDOW_WIDTH, WINDOW_HEIGHT);

	glPointSize(4.0);

	/* Load images */
	int widthTopBottom, heightTopBottom, nb_canauxTopBottom, widthSides, heightSides, nb_canauxSides;

	unsigned char *imageTopBottom = stbi_load("doc/plafondcorridor.png", &widthTopBottom, &heightTopBottom, &nb_canauxTopBottom, 0);

	if (imageTopBottom == NULL)
	{
		printf("Erreur lors du chargement de l'image de plafond !\n");
	}
	else
	{
		printf("Image de plafond correctement chargée\n");
	}
	
	unsigned char *imageSides = stbi_load("doc/cotecorridor.png", &widthSides, &heightSides, &nb_canauxSides, 0);

	if (imageSides == NULL)
	{
		printf("Erreur lors du chargement de l'image de côtés !\n");
	}
	else
	{
		printf("Image de côtés correctement chargée\n");
	}
	
	GLuint texturesTopBottom, texturesSides;

	glGenTextures(1, &texturesTopBottom);

	glBindTexture(GL_TEXTURE_2D, texturesTopBottom);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, widthTopBottom, heightTopBottom, 0, GL_RGBA, GL_UNSIGNED_BYTE, imageTopBottom);

	glBindTexture(GL_TEXTURE_2D, 0);

	glBindTexture(GL_TEXTURE_2D, texturesSides);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);

	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, widthSides, heightSides, 0, GL_RGBA, GL_UNSIGNED_BYTE, imageSides);

	glBindTexture(GL_TEXTURE_2D, 0);

	/* Loop until the user closes the window */
	while (!glfwWindowShouldClose(window))
	{
		/* Get time (in second) at loop beginning */
		double startTime = glfwGetTime();

		/* Cleaning buffers and setting Matrix Mode */
		glClearColor(0.5, 0.5, 0.5, 0.0);
		glClear(GL_COLOR_BUFFER_BIT);

		glMatrixMode(GL_MODELVIEW);
		glLoadIdentity();

		/* RENDER HERE */
		
		drawCorridor(texturesTopBottom, texturesSides);

		/* Swap front and back buffers */
		glfwSwapBuffers(window);

		/* Poll for and process events */
		glfwPollEvents();

		/* Elapsed time computation from loop begining */
		double elapsedTime = glfwGetTime() - startTime;
		/* If to few time is spend vs our wanted FPS, we wait */
		if (elapsedTime < FRAMERATE_IN_SECONDS)
		{
			glfwWaitEventsTimeout(FRAMERATE_IN_SECONDS - elapsedTime);
		}
	}

	stbi_image_free(imageTopBottom);

	glDeleteTextures(1, &texturesTopBottom);
	
	stbi_image_free(imageSides);

	glDeleteTextures(1, &texturesSides);

	glfwTerminate();
	return 0;
}
